name: Get word
inputs:
- {name: text, type: String}
- {name: word, type: String}
outputs:
- {name: Output, type: Boolean}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def get_word(text, word):
          text_lower = text.lower()
          word_lower = word.lower()
          return True if word_lower in text_lower else False

      def _serialize_bool(bool_value: bool) -> str:
          if isinstance(bool_value, str):
              return bool_value
          if not isinstance(bool_value, bool):
              raise TypeError('Value "{}" has type "{}" instead of bool.'.format(str(bool_value), str(type(bool_value))))
          return str(bool_value)

      import argparse
      _parser = argparse.ArgumentParser(prog='Get word', description='')
      _parser.add_argument("--text", dest="text", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--word", dest="word", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = get_word(**_parsed_args)

      _outputs = [_outputs]

      _output_serializers = [
          _serialize_bool,

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --text
    - {inputValue: text}
    - --word
    - {inputValue: word}
    - '----output-paths'
    - {outputPath: Output}
